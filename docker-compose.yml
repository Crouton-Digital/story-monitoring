---
name: monitoring

services:
  cosmos-validator-watcher:
    image: ghcr.io/crouton-digital/story-validator-exporter:v0.12.2
    container_name: cosmos-validator-watcher
    labels:
      network: "mainnet"
      #entrypoint: tail -f /dev/null
    command: >
      --log-level debug
      --node https://story-testnet-rpc.validator247.com
      --node https://story-testnet-rpc.itrocket.net
      --validator BAED8E3FAD9FD20457EA2AD53A631AFAA6477F3A:CroutonDigital
    ports:
      - "8080:8080"
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
    logging:
      driver: "json-file"
      options:
        max-size: 100m
        max-file: "3"
    restart: unless-stopped
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: node-exporter
    labels:
      network: "mainnet"
    command:
      - "--path.rootfs=/rootfs"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|run|mnt)($$|/)"
    volumes:
      - type: bind
        source: /
        target: /rootfs
        read_only: true
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
    logging:
      driver: "json-file"
      options:
        max-size: 100m
        max-file: "3"
    pid: "host"
    network_mode: "host"
    restart: unless-stopped

  smartctl-exporter:
    image: prometheuscommunity/smartctl-exporter:v0.12.0
    container_name: smartctl-exporter
    labels:
      org.label-schema.group: "monitoring"
      network: "mainnet"
    privileged: true
    user: root
    ports:
      - "9633:9633"
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
    logging:
      driver: "json-file"
      options:
        max-size: 100m
        max-file: "3"
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor
    labels:
      network: "mainnet"
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:ro"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
      - "/dev/disk/:/dev/disk:ro"
    privileged: true
    ports:
      - "18080:8080"
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
    logging:
      driver: "json-file"
      options:
        max-size: 100m
        max-file: "3"
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - prometheus_data:/prometheus
      - prometheus_etc:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090
    networks:
      - monitoring
    restart: always
  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./volumes/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./volumes/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_AUTH_BASIC_ENABLED=true
      #- GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_DATABASE_WAL=true
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=pg_grafana:5432
      - GF_DATABASE_NAME=grafana_db
      - GF_DATABASE_USER=grafana_user
      - GF_DATABASE_PASSWORD=eyTxMUpnN2CfFweejmn7GiD
      - GF_DATABASE_SSL_MODE=disable
    restart: always
    ports:
      - "3000:3000"
    networks:
      - monitoring
    labels:
      org.label-schema.group: "monitoring"
    depends_on:
      - pg_grafana
      - prometheus
  pg_grafana:
    container_name: pg_grafana
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: grafana_db
      POSTGRES_USER: grafana_user
      POSTGRES_PASSWORD: eyTxMUpnN2CfFweejmn7GiD
    ports:
      - "5499:5432"
    volumes:
      - pg_grafana:/var/lib/postgresql/data
    networks:
      - monitoring

networks:
  monitoring:
    name: monitoring

volumes:
  prometheus_etc:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/services/monitoring/volumes/prometheus_etc
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/services/monitoring/volumes/prometheus_disk
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/services/monitoring/volumes/grafana_disk
  pg_grafana:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/services/monitoring/volumes/pg_grafana